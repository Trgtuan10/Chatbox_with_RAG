import google.generativeai as genai
import time

def gemini():
    genai.configure(api_key="AIzaSyDtOukKpgHvIwkvwPaCOC4gcIw7CE8VtB0")
    # Set up the model
    generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 0,
    "max_output_tokens": 8192,
    }
    safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCk_NONE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCk_NONE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCk_NONE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCk_NONE"
    },
    ]
    
    system_instruction = "b·∫°n l√† m·ªôt tr·ª£ l√≠ Ti·∫øng Vi·ªát nhi·ªát t√¨nh v√† trung th·ª±c. B·∫°n lu√¥n tr·∫£ l·ªùi m·ªôt c√°ch h·ªØu √≠ch nh·∫•t c√≥ th·ªÉ, ƒë·ªìng th·ªùi gi·ªØ an to√†n.\n"
    
    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                                generation_config=generation_config,
                                safety_settings=safety_settings,
                                system_instruction=system_instruction)
    convo = model.start_chat(history=[
    {
        "role": "user",
        "parts": ["hey"]
    },
    {
        "role": "model",
        "parts": ["Hey! How can I help you today? üòä"]
    },
    ])
    return convo

def gemini_answering(model, prompt, context):
    query = f"ƒê·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi {prompt}, h√£y d√πng th√¥ng tin sau: {context} . N·∫øu b·∫°n kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y n√≥i kh√¥ng bi·∫øt, ƒë·ª´ng c·ªë t·∫°o ra c√¢u tr·∫£ l·ªùi.\n "
    # print(query)
    return model.send_message(query).text

if __name__ == "__main__":
    model = gemini()
    prompt = "ai l√† t√°c gi·∫£ c·ªßa b√†i h√°t abc"

    context = "abc d∆∞·ª£c s√°ng t√°c b·ªüi ca sƒ© ng∆∞·ªùi mi·ªÅn nam. B√†i h√°t n√†y ƒë√£ ƒë∆∞·ª£c ph√°t h√†nh v√†o nƒÉm 2020. B√†i h√°t n√†y ƒë√£ ƒë·∫°t ƒë∆∞·ª£c nhi·ªÅu gi·∫£i th∆∞·ªüng l·ªõn. B√†i h√°t n√†y ƒë√£ ƒë∆∞·ª£c ph√°t h√†nh b·ªüi c√¥ng ty √¢m nh·∫°c l·ªõn nh·∫•t Vi·ªát Nam. ch·ªß nhan c·ªßa n√≥ t√™n l√† tu·∫•n"

    print(gemini_answering(model, prompt, context))